# 一、准备工作
## 我对比赛建模流程不熟悉，所以我首先是在b站了解了相关流程：1、数据处理 2、建立模型 3、调整参数和选择特征 4、提交
# 二、正式建模
## 1、数据处理：首先使用df.describe()查看大体的数据情况，在泰坦尼克号预测的train.csv中有Age、Cabin、Embark等数据中存在空白，我采用了填充空白值和向前填充ffill的方法，然后把不是数字的数据转换成了数字
## 2、选择模型：我是直接采用的sklearn中的决策树模型（第一次选择的线性回归，但效果没有决策树好）
## 3、训练模型：我采取的交叉验证（Kfold)
## 4、用训练好的模型预测验证集，并提交csv文件
## 5、额外做了个柱状图看一下各个特征的重要程度，最后选定了个五特征做决策依据"C:\Users\liyao\Pictures\Screenshots\屏幕截图 2025-02-04 104458.png" 
import pandas as pd 
import numpy as np 
df=pd.read_csv("C:\\Users\\liyao\\Downloads\\train (1).csv") 
df_drop=df.drop('Cabin',axis=1) 
df_drop.head() 
num=df_drop["Age"].mean() 
num=np.floor(num) 
df_drop.loc[:,"Age"]=df_drop["Age"].fillna(num) 
df_drop.loc[df_drop["Sex"]=="male","Sex"] = 0 
df_drop.loc[df_drop["Sex"]=="female","Sex"] = 1 
df_drop.loc[:,"Embarked"]=df_drop["Embarked"].ffill() 
df_drop.loc[df_drop["Embarked"]=='S',"Embarked"] = 0 
df_drop.loc[df_drop["Embarked"]=="C","Embarked"] = 1 
df_drop.loc[df_drop["Embarked"]=="Q","Embarked"] = 2 

from sklearn.linear_model import LinearRegression 
from sklearn.model_selection import KFold 
from sklearn.metrics import mean_squared_error,accuracy_score 
factors=np.array(["Pclass","Sex","Age","SibSp","Parch","Fare","Embarked"]) 
target="Survived" 
model=LinearRegression() 
kf=KFold(n_splits=3,shuffle=True,random_state=42) 
mse_scores=[] 
accuracy_scores=[] 
for train,test in kf.split(df_drop): 
    train_factors = df_drop.loc[train,factors] 
    train_target = df_drop.loc[train,target] 
    test_factors = df_drop.loc[test,factors] 
    test_target = df_drop.loc[test,target] 
    model.fit(train_factors,train_target) 
    test_predictions= model.predict(test_factors) 
    test_predictions_class=(test_predictions>0.5).astype(int) 
    mse=mean_squared_error(test_target,test_predictions) 
    mse_scores.append(mse) 
    accuracy=accuracy_score(test_target,test_predictions_class) 
    accuracy_scores.append(accuracy) 
    print(f"fold mse ={mse}")  
    print(f"accuracy ={accuracy}") 
print(f"mean mse={sum(mse_scores)/len(mse_scores)}") 
print(f"mean accuracy={sum(accuracy_scores)/len(accuracy_scores)}") 
## 以上是采用线性回归，平均准确率只有0.79
import pandas as pd 
import numpy as np 
df=pd.read_csv("C:\\Users\\liyao\\Downloads\\train (1).csv") 
df_drop=df.drop('Cabin',axis=1) 
num=df_drop["Age"].mean() 
num=np.floor(num) 
df_drop.loc[:,"Age"]=df_drop["Age"].fillna(num) 
df_drop.loc[df_drop["Sex"]=="male","Sex"] = 0 
df_drop.loc[df_drop["Sex"]=="female","Sex"] = 1 
df_drop.loc[:,"Embarked"]=df_drop["Embarked"].ffill() 
df_drop.loc[df_drop["Embarked"]=='S',"Embarked"] = 0 
df_drop.loc[df_drop["Embarked"]=="C","Embarked"] = 1 
df_drop.loc[df_drop["Embarked"]=="Q","Embarked"] = 2 
df_drop["namelen"]=df_drop["Name"].apply(lambda x:len(x)) 
from sklearn.model_selection import KFold,cross_val_score 
from sklearn.ensemble import RandomForestClassifier 
factors=np.array(["Pclass","Sex","Age","Fare","Embarked"]) 
model = RandomForestClassifier(random_state=42,n_estimators=30,min_samples_leaf=2,min_samples_split=4) 
kf = KFold(n_splits=5,shuffle=True,random_state=42) 
x=df_drop[factors] 
y=df_drop["Survived"] 
accuracy_scores=[] 
for train,test in kf.split(df_drop): 
    train_factors = df_drop.loc[train,factors] 
    train_target = df_drop.loc[train,target] 
    test_factors = df_drop.loc[test,factors] 
    test_target = df_drop.loc[test,target] 
    model.fit(train_factors,train_target) 
    test_predictions= model.predict(test_factors) 
    test_predictions_class=(test_predictions>0.5).astype(int) 
    accuracy=accuracy_score(test_target,test_predictions_class) 
    accuracy_scores.append(accuracy) 
    print(f"accuracy ={accuracy}") 
print(f"mean accuracy={sum(accuracy_scores)/len(accuracy_scores)}") 

df_test=pd.read_csv("C:\\Users\\liyao\\AppData\\Local\\Temp\\winzipse\\{5D084A9C-4A2E-44C4-BC1C-6A0123DB063F}\\test.csv")  
df_ts=df_test.drop("Cabin",axis=1) 
num1=df_ts["Age"].mean() 
num1=np.floor(num1) 
num2=df_ts["Fare"].mean() 
df_ts.loc[:,"Age"]=df_ts["Age"].fillna(num1) 
df_ts.loc[:,"Fare"]=df_ts["Fare"].fillna(num2) 
df_ts.loc[df_ts["Sex"]=="male","Sex"] = 0 
df_ts.loc[df_ts["Sex"]=="female","Sex"] = 1 
df_ts.loc[:,"Embarked"]=df_ts["Embarked"].ffill() 
df_ts.loc[df_ts["Embarked"]=='S',"Embarked"] = 0 
df_ts.loc[df_ts["Embarked"]=="C","Embarked"] = 1 
df_ts.loc[df_ts["Embarked"]=="Q","Embarked"] = 2 
x_ts=df_ts.loc[:,["Pclass","Sex","Age","Fare","Embarked"]] 
predictions = model.predict(x_ts) 
submission_df=pd.DataFrame(columns=["PassengerId","Survived"]) 
submission_df["PassengerId"]=df_ts["PassengerId"].copy() 
submission_df["Survived"]=predictions.copy() 
submission_df.to_csv("D:\\作业.c\\submission\\subm.csv",index=False) 
以上是用决策树做的，准确率0.83
最后在kaggle上的得分是0.77
效果不是很好，还有待改进。



