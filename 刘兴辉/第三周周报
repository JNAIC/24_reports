学习了一下类，大致这样
一、类的基本概念
类，用来描述具有相同的属性和方法的对象的集合。定义了每个对象所共有的属性和方法。对象是类的实例。
对象，通过类定义的数据结构实例。对象包括两个数据成员（类变量和实例变量）和方法。
二、类的组成
类变量：类变量在整个实例化的对象中公用。类变量定义在类中且在函数体之外。类变量通常不作为实例变量使用。
数据成员：类变量或者实例变量，用于处理类及其实例对象的相关的数据。
实例变量：在类的声明中，属性用变量来表示。就是实例变量，是在类声明的内部但是在类的其他成员方法之外声明的
方法：类中定义的函数。
实例方法：关联对象，通过对象调用实例方法。
类方法：用@classmethod装饰器来标识，类方法的第一个参数是cls，通过类名调用类方法时，不需要传递cls参数。
静态方法：用@staticmethod装饰器来标识。
三、类的特性
像继承，封装，多态，方法重写：如果从父类继承的方法不能满足子类的需求，可以对其进行改写，这个过程叫方法的覆盖（Override），也称为方法的重写。
局部变量
class Person:
    species = "数竞"
    def __init__(self, name, age):
        self.name = name  
        self.age = age    
    def speak(self):
        print(f"{self.name}说：我是{self.species}。")
    @classmethod
    def get_species(cls):
        return cls.species
    @staticmethod
    def help():
        print("?")
p1 = Person("a", 30)
p2 = Person("b", 25)
p1.speak()  
Person.help()  
